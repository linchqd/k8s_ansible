- name: bind kubelet-api-admin role for kubeapiserver
  shell: "kubectl get clusterrolebinding | grep kube-apiserver:kubelet-apis || echo 'noexists'"
  register: get_kube_api_role
  ignore_errors: yes
- name: bind kubelet-api-admin role for kubeapiserver
  command: kubectl create clusterrolebinding kube-apiserver:kubelet-apis --clusterrole=system:kubelet-api-admin --user kubernetes
  when: get_kube_api_role.stdout == 'noexists'
  ignore_errors: yes
- name: cp csr-crb.yaml file
  copy:
    src: "{{ansible_root}}/roles/kubernetes/bind_kube_role/files/csr-crb.yaml"
    dest: /srv/kubernetes/config/csr-crb.yaml
    owner: root
    group: root
    mode: 0644
- name: apply csr-crb.yaml file
  command: kubectl apply -f /srv/kubernetes/config/csr-crb.yaml
  ignore_errors: yes
- name: bind kubelet role
  shell: "kubectl get clusterrolebinding | grep kubelet-node || echo 'noexists'"
  register: get_kube_role
  ignore_errors: yes
- name: bind kubelet role
  command: kubectl create clusterrolebinding kubelet-node --clusterrole=system:node --user=kubelet-node
  when: get_kube_role.stdout == 'noexists'
  ignore_errors: yes
- name: wait for kubelet role bind 
  command: sleep 30
- name: approve node csr
  shell: "kubectl get csr | grep Pending || echo 'noexists'"
  register: get_csr
  ignore_errors: yes
- name: approve node csr
  shell: kubectl certificate approve $(kubectl get csr | grep Pending | awk '{print $1}')
  ignore_errors: yes
  when: get_csr.stdout != 'noexists'
